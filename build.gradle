plugins {
	id 'java'
	
	id 'eclipse'
	id 'idea'
	
	id 'maven-publish'
	//id 'com.github.johnrengelman.shadow' version '1.2.3'
    //id 'org.spongepowered.plugin' version '0.8.1'
}

group = "com.kmecpp"
version = project_version

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    shade
    implementation.extendsFrom shade
    testCompile.extendsFrom compile
}

/*
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project_id
            from components.java
            //artifact sourcesJar
            //artifact javadocJar
            //pom {
                //name = project_name
                //description = project_description
                //url = project_url
            //}
        }
    }
    repositories {
    	maven {
    	    credentials {
    			username = project.properties.mavenUser
    			password = project.properties.mavenPassword
    		}
    		def releasesRepoUrl = "https://oss.sonatype.org/content/repositories/releases"
    		def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
    		//url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    		url = snapshotsRepoUrl //Be safe for now
        }
    }
}

/*
 * COMPILIATION
 */
compileJava {
    options.compilerArgs += ["-proc:none"]
//    options.compilerArgs += ["-processor", "com.kmecpp.osmium.ap.ConfigTypeProcessor"]
//    compileJava.options.compilerArgs.addAll(["-processor", "com.kmecpp.osmium.ap.ConfigTypeProcessor"])
    sourceCompatibility = 8
    targetCompatibility = 8
}
 
processResources {
	expand(project.properties)
}

task processAppInfo(type: Copy) {
    from 'src/main/java/com/kmecpp/osmium/AppInfo.java'
    into 'build/generated/com/kmecpp/osmium/'
    expand(project.properties)
}


task compileAppInfo(type: JavaCompile) {
    source = "build/generated"
    classpath = sourceSets.main.compileClasspath
    destinationDir = file('build/generated')
}

compileAppInfo.dependsOn processAppInfo
compileJava.dependsOn compileAppInfo

sourceSets {
	generated {
		java {
			srcDir "build/generated"
		}
	}
	main {
		java {
			srcDir 'src/main/java'
			exclude 'com/kmecpp/osmium/AppInfo.java'
		}
	}
	test {
		java.srcDirs = ["src/test/java"]
		resources.srcDirs = ["src/test/resources"]
	}
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

/*
 * END COMPILIATION
 */

repositories {
	jcenter()
	//maven { url "http://ci.kmecpp.com/plugin/repository/everything/" }
	maven { url "https://repo.spongepowered.org/maven" }
	maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
	//maven { url "http://repo.bstats.org/content/repositories/releases/" }
}

configurations.all {
	resolutionStrategy {
		//force 'org.javassist:javassist:3.21.0-GA'
	}
}

dependencies {
	//annotationProcessor("com.kmecpp:osmium:1.0.0-SNAPSHOT")
	//implementation files("lib/spigot-1.13.2.jar")
	implementation files("lib/spigot-1.12.2-R0.1-SNAPSHOT-b1648_DEOBF.jar")
	implementation files("lib/spongevanilla-1.12.2-8.0.0-BETA-448.jar");
	implementation files("lib/Travertine-175.jar");
	//implementation "org.spigotmc:spigot:$bukkit_version"
	//implementation "org.spongepowered:spongeapi:$sponge_version"
	implementation files("build/generated/com/kmecpp/osmium/AppInfo.class")
	//compileOnly "org.spongepowered:spongevanilla:1.12.2-7.1.0-BETA-75" //Breaking builds. Find alternative for this
	shade "org.javassist:javassist:3.21.0-GA"

	//shade "com.kmecpp:jlib:+"
	shade "com.eclipsesource.minimal-json:minimal-json:0.9.5"
	shade "org.spongepowered:configurate-hocon:3.7.3"
	shade "org.spongepowered:plugin-meta:0.4.1"
	//shade "log4j:log4j:1.2.17"
	//shade "org.yaml:snakeyaml:1.25"
	shade "org.apache.logging.log4j:log4j-api:2.11.1"

	//shade "org.fusesource.jansi:jansi:1.18"

	//shade "org.bstats:bstats-bukkit:1.2"
	//shade "org.bstats:bstats-sponge:1.2"
	//shade "com.zaxxer:HikariCP:3.4.5"
	shade "com.zaxxer:HikariCP:4.0.3"

	shade "org.xerial:sqlite-jdbc:3.25.2"
	shade 'mysql:mysql-connector-java:8.0.29'
	//shade "com.github.gwenn:sqlite-dialect:0.1.0"
	//shade "org.hibernate:hibernate-core:5.4.0.Final"
	//shade "org.hibernate:hibernate-hikaricp:5.4.0.Final"
	//shade "org.hibernate:hibernate-annotations:3.4.0-Final"
	//shade "com.zsoltfabok:sqlite-dialect:1.0"
		
    testImplementation 'junit:junit:4.12'
}
/*
sponge {
    plugin {
        meta {
        println project_version
            name = project_name
            version = project_version
            description = project_description
            url = project_url
        }
    }
}*/

jar {
	manifest.mainAttributes(
		"Built-By": "kmecpp",
		"Implementation-Title": archivesBaseName,
		"Implementation-Version": project.version)
						
    configurations.shade.each { dep ->
    	print dep
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**', "module-info.class"
        }
    }
}

/*
uploadArchives {
    repositories {
        mavenDeployer {
        	uniqueVersion = false
        	repository(url: "http://repo.spongepowered.org") {
        	}
        
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'com.kmecpp' && it.artifactId == 'osmium' }
            }

            ivy {
            	credentials {
            		username project.properties.mavenUser
            		password project.properties.mavenPassword
            	}
            	url "http://repo.kmecpp.com"
            }
        }
    }
}*/

build.doLast {
	//BUKKIT
	if (project.hasProperty("bukkit_server")) {
		exec {
			commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("bukkit_server").replaceAll("%20", " ") + "\\plugins", '/Y'
		}
	}
	//SPONGE
	if (project.hasProperty("sponge_server")) {
		exec {
			commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("sponge_server").replaceAll("%20", " ") + "\\mods\\plugins", '/Y'
		}
	}
	
	//SERVER
	if (project.hasProperty("server_path")) {
		exec { commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("server_path").replaceAll("%20", " ") + "\\plugins", '/Y' }
		println("Copied plugin jar to " + project.getProperty("server_path").replaceAll("%20", " ") + "\\plugins");
	}
	if (project.hasProperty("server_path2")) {
		exec { commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("server_path2").replaceAll("%20", " ") + "\\plugins", '/Y' }
		println("Copied plugin jar to " + project.getProperty("server_path2").replaceAll("%20", " ") + "\\plugins");
	}
	if (project.hasProperty("server_path3")) {
		exec { commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("server_path3").replaceAll("%20", " ") + "\\plugins", '/Y' }
		println("Copied plugin jar to " + project.getProperty("server_path3").replaceAll("%20", " ") + "\\plugins");
	}
	if (project.hasProperty("server_path4")) {
		exec { commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("server_path4").replaceAll("%20", " ") + "\\plugins", '/Y' }
		println("Copied plugin jar to " + project.getProperty("server_path4").replaceAll("%20", " ") + "\\plugins");
	}
}
